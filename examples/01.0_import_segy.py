import sys
sys.path.insert(1, '../../PySeis')
import numpy as np
from PySeis.io.segy import Segy
from os.path import join

# Define base path
base_path = "../data/"

#define the input file
input_sgy = join(base_path, "Line_001.sgy")

#import dataset
''' 
when you initialise the class (e.g. Segy("somefile.sgy)) it will 
		readEBCDIC()
		readBheader()
		readNS()
		report() (if verbose=1)

the EBCDIC is stored in self.params["EBCDIC"]
the BHEADER is stores as an array self.bheader as well as dictionary values in self.params["BHEADER"]

However this step DOES NOT read in the data.

'''
input = Segy(input_sgy)

#read dataset
'''
the following step reads in the segy and converts to a .npy file.
The .npy file has the SU file dtype (structured array with 240 byte header)
the only difference between a .npy file and a .su file created with this method is the 
.npy file has an additional header.
In future a .npz file might be used in order to preserve the EBCDIC/BHEADER, and potentially 
other data

the output location is the same as the input location, with .npy added to the filename.

This is because this step is literally just meant to convert a .sgy to .npy file. Futher file work is pure numpy load/saves.
'''
input.read() #generates a 425MB file on disk.
#ready the numpy data
data = np.memmap(input_sgy+".npy", dtype=input._dtype, mode='r+')
print("npy data: ", data[0])

# #read the same data generated by SU's segyread
data = np.fromfile("../data/Line_001.su", dtype=input._dtype)
print("su data: ", data[0])


